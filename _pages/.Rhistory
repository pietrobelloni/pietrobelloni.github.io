getwd()
100/7
(100/7)*70
70*0.14
0.2*0.2
(0.2*0.2)/0.3
30*0.05
50*0.05
20*0.2
n_samples = 3000
# Create dataset with 2 Gaussian distributions and uniform distribution
n_sample <- n_samples/3
data <- matrix(0, n_samples, 3)
data_0 <- rmvnorm(n_sample, mean=c(-1, 1), sigma=matrix(c(2,1,1,2), ncol=2))
data_1 <- rmvnorm(n_sample, mean=c(1, 5), sigma=matrix(c(3,1,2,1), ncol=2))
library(tidyverse)
library(mvtnorm)
library(rebmix)
library(ggpubr)
library(mclust)
library(ggfortify)
library(sjPlot)
library(mixtools)
library(NPEL.Classification)
library(caret)
n_samples = 3000
# Create dataset with 2 Gaussian distributions and uniform distribution
n_sample <- n_samples/3
data <- matrix(0, n_samples, 3)
data_0 <- rmvnorm(n_sample, mean=c(-1, 1), sigma=matrix(c(2,1,1,2), ncol=2))
n_samples = 3000
# Create dataset with 2 Gaussian distributions and uniform distribution
n_sample <- n_samples/3
data <- matrix(0, n_samples, 3)
data_0 <- rmvnorm(n_sample, mean=c(-1, 1), sigma=matrix(c(2,1,1,2), ncol=2))
library(mvtnorm)
data_0 <- rmvnorm(n_sample, mean=c(-1, 1), sigma=matrix(c(2,1,1,2), ncol=2))
data_1 <- rmvnorm(n_sample, mean=c(1, 5), sigma=matrix(c(3,1,2,1), ncol=2))
matrix(c(3,1,2,1), ncol=2)
data_1 <- rmvnorm(n_sample, mean=c(1, 5), sigma=matrix(c(3,2,2,1), ncol=2))
data_1
data_2 <- matrix(runif(n_sample*2, min=5, max=10), n_sample, 2)
# Merged all datapoints into one dataset
data[1:n_sample, 1:2] <- data_0
n_samples = 3000
# Create dataset with 2 Gaussian distributions and uniform distribution
n_sample <- n_samples/3
data <- matrix(0, n_samples, 3)
library(mvtnorm)
data_0 <- rmvnorm(n_sample, mean=c(-1, 1), sigma=matrix(c(2,1,1,2), ncol=2))
data_1 <- rmvnorm(n_sample, mean=c(1, 5), sigma=matrix(c(3,2,2,1), ncol=2))
data_2 <- matrix(runif(n_sample*2, min=5, max=10), n_sample, 2)
# Merged all datapoints into one dataset
data[1:n_sample, 1:2] <- data_0
data[1:n_sample, 3] <- rep(0, n_sample)
data[(n_sample+1):(2*n_sample), 1:2] <- data_1
data[(n_sample+1):(2*n_sample), 3] <- rep(1, n_sample)
data[(2*n_sample+1):n_samples, 1:2] <- data_2
data[(2*n_sample+1):n_samples, 3] <- rep(2, n_sample)
data <- as.data.frame(data)
table(data$V3)
ggplot(data = data, aes(x = V1, y = V2, col = as.factor(V3))) +
geom_point() +
ggtitle("La nuda e cruda verità")
library(tidyverse)
ggplot(data = data, aes(x = V1, y = V2, col = as.factor(V3))) +
geom_point() +
ggtitle("La nuda e cruda verità")
data_1 <- rmvnorm(n_sample, mean=c(1, 5), sigma=matrix(c(3,2,2,1), ncol=2))
data_1 <- rmvnorm(n_sample, mean=c(1, 5), sigma=matrix(c(3,2,2,1), ncol=2))
nearPD(matrix(c(3,2,2,1))
nearPD(matrix(c(3,2,2,1)), ncol=2)
library(matrix)
library(Matrix)
data_1 <- rmvnorm(n_sample, mean=c(1, 5), sigma=nearPD(matrix(c(3,2,2,1)), ncol=2))
matrix(c(3,2,2,1), ncol=2)
nearPD(matrix(c(3,2,2,1), ncol=2))
data_0 <- rmvnorm(n_sample, mean=c(-1, 1), sigma=matrix(c(2,1,1,2), ncol=2))
data_1 <- rmvnorm(n_sample, mean=c(1, 5), sigma=matrix(c(3,2,2,3), ncol=2))
data_2 <- matrix(runif(n_sample*2, min=5, max=10), n_sample, 2)
# Merged all datapoints into one dataset
data[1:n_sample, 1:2] <- data_0
data[1:n_sample, 3] <- rep(0, n_sample)
data[(n_sample+1):(2*n_sample), 1:2] <- data_1
data[(n_sample+1):(2*n_sample), 3] <- rep(1, n_sample)
data[(2*n_sample+1):n_samples, 1:2] <- data_2
data[(2*n_sample+1):n_samples, 3] <- rep(2, n_sample)
data <- as.data.frame(data)
table(data$V3)
library(tidyverse)
ggplot(data = data, aes(x = V1, y = V2, col = as.factor(V3))) +
geom_point() +
ggtitle("La nuda e cruda verità")
kmeans <- kmeans(data[, 1:2], centers = 3)
data$y_kmeans <- kmeans$cluster - 1
ggplot(data = data, aes(x = V1, y = V2, col = as.factor(y_kmeans))) +
geom_point() +
ggtitle("Kmeans")
mu_init <- list(c(runif(1, min = min(data$V1), max = max(data$V1)),
runif(1, min = min(data$V2), max = max(data$V2))),
c(runif(1, min = min(data$V1), max = max(data$V1)),
runif(1, min = min(data$V2), max = max(data$V2))),
c(runif(1, min = min(data$V1), max = max(data$V1)),
runif(1, min = min(data$V2), max = max(data$V2))))
gm <- mvnormalmixEM(data[, 1:2],
k = 3,
mu = mu_init,
arbvar = FALSE,
verb = TRUE,
maxit = 100)
library(rebmix)
mu_init <- list(c(runif(1, min = min(data$V1), max = max(data$V1)),
runif(1, min = min(data$V2), max = max(data$V2))),
c(runif(1, min = min(data$V1), max = max(data$V1)),
runif(1, min = min(data$V2), max = max(data$V2))),
c(runif(1, min = min(data$V1), max = max(data$V1)),
runif(1, min = min(data$V2), max = max(data$V2))))
gm <- mvnormalmixEM(data[, 1:2],
k = 3,
mu = mu_init,
arbvar = FALSE,
verb = TRUE,
maxit = 100)
library(rebmix)
gm <- mvnormalmixEM(data[, 1:2],
k = 3,
mu = mu_init,
arbvar = FALSE,
verb = TRUE,
maxit = 100)
library(mixtools)
mu_init <- list(c(runif(1, min = min(data$V1), max = max(data$V1)),
runif(1, min = min(data$V2), max = max(data$V2))),
c(runif(1, min = min(data$V1), max = max(data$V1)),
runif(1, min = min(data$V2), max = max(data$V2))),
c(runif(1, min = min(data$V1), max = max(data$V1)),
runif(1, min = min(data$V2), max = max(data$V2))))
gm <- mvnormalmixEM(data[, 1:2],
k = 3,
mu = mu_init,
arbvar = FALSE,
verb = TRUE,
maxit = 100)
gm <- mvnormalmixEM(data[, 1:2],
k = 3,
mu = mu_init,
arbvar = FALSE,
verb = TRUE,
maxit = 100)
set.seed(123)
gm <- mvnormalmixEM(data[, 1:2],
k = 3,
mu = mu_init,
arbvar = FALSE,
verb = TRUE,
maxit = 100)
gm$posterior |> head()
data$y_gm <- prob2class(gm$posterior)
library(NPEL.Classification)
data$y_gm <- prob2class(gm$posterior)
ggplot(data = data, aes(x = V1, y = V2, col = as.factor(y_gm))) +
geom_point() +
ggtitle("Mixture model")
kmeans[["centers"]]
mu_init2 <- list(kmeans[["centers"]][1,],
kmeans[["centers"]][2,],
kmeans[["centers"]][3,])
gm2 <- mvnormalmixEM(data[, 1:2],
k = 3,
mu = mu_init2,
arbvar = TRUE,
verb = TRUE,
maxit = 100)
set.seed(123)
gm2 <- mvnormalmixEM(data[, 1:2],
k = 3,
mu = mu_init2,
arbvar = TRUE,
verb = TRUE,
maxit = 50)
data$y_gm2 <- prob2class(gm2$posterior)
ggplot(data = data, aes(x = V1, y = V2, col = as.factor(y_gm2))) +
geom_point() +
ggtitle("Mixture model with kmeans")
data$kmeans <- ifelse(data$y_kmeans == 1, 2,
ifelse(data$y_kmeans == 2, 1, 0))
data$gm <- ifelse(data$y_gm == "comp.1", 0,
ifelse(data$y_gm == "comp.2", 2, 1))
data$gm2 <- ifelse(data$y_gm2 == "comp.1", 0,
ifelse(data$y_gm2 == "comp.2", 2, 1))
confusionMatrix(table(data$V3, data$kmeans))
confusionMatrix(table(data$V3, data$gm))
library(caret)
confusionMatrix(table(data$V3, data$kmeans))
confusionMatrix(table(data$V3, data$gm))
plot1 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(V3))) +
geom_point() +
ggtitle("La nuda e cruda verità")
plot2 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(kmeans))) +
geom_point() +
ggtitle("Kmeans")
plot3 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(gm))) +
geom_point() +
ggtitle("Mixture model")
plot4 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(gm2))) +
geom_point() +
ggtitle("Mixture model with kmeans")
ggarrange(plot1, plot2, plot3, plot4, ncol = 2, nrow = 2)
library(ggpubr)
ggarrange(plot1, plot2, plot3, plot4, ncol = 2, nrow = 2)
n_samples = 3000
# Create dataset with 2 Gaussian distributions and uniform distribution
n_sample <- n_samples/3
data <- matrix(0, n_samples, 3)
library(mvtnorm)
library(Matrix)
set.seed(123)
data_0 <- rmvnorm(n_sample, mean=c(-1, 1), sigma=matrix(c(2,1,1,2), ncol=2))
n_samples = 3000
# Create dataset with 2 Gaussian distributions and uniform distribution
n_sample <- n_samples/3
data <- matrix(0, n_samples, 3)
library(mvtnorm)
library(Matrix)
set.seed(123)
data_0 <- rmvnorm(n_sample, mean=c(-1, 1), sigma=matrix(c(2,1,1,2), ncol=2))
data_1 <- rmvnorm(n_sample, mean=c(1, 5), sigma=matrix(c(3,2,2,3), ncol=2))
data_2 <- matrix(runif(n_sample*2, min=5, max=10), n_sample, 2)
# Merged all datapoints into one dataset
data[1:n_sample, 1:2] <- data_0
data[1:n_sample, 3] <- rep(0, n_sample)
data[(n_sample+1):(2*n_sample), 1:2] <- data_1
data[(n_sample+1):(2*n_sample), 3] <- rep(1, n_sample)
data[(2*n_sample+1):n_samples, 1:2] <- data_2
data[(2*n_sample+1):n_samples, 3] <- rep(2, n_sample)
data <- as.data.frame(data)
table(data$V3)
library(tidyverse)
ggplot(data = data, aes(x = V1, y = V2, col = as.factor(V3))) +
geom_point() +
ggtitle("La nuda e cruda verità")
kmeans <- kmeans(data[, 1:2], centers = 3)
data$y_kmeans <- kmeans$cluster - 1
ggplot(data = data, aes(x = V1, y = V2, col = as.factor(y_kmeans))) +
geom_point() +
ggtitle("Kmeans")
library(mixtools)
mu_init <- list(c(runif(1, min = min(data$V1), max = max(data$V1)),
runif(1, min = min(data$V2), max = max(data$V2))),
c(runif(1, min = min(data$V1), max = max(data$V1)),
runif(1, min = min(data$V2), max = max(data$V2))),
c(runif(1, min = min(data$V1), max = max(data$V1)),
runif(1, min = min(data$V2), max = max(data$V2))))
set.seed(123)
gm <- mvnormalmixEM(data[, 1:2],
k = 3,
mu = mu_init,
arbvar = FALSE,
verb = TRUE,
maxit = 100)
gm$posterior |> head()
library(NPEL.Classification)
data$y_gm <- prob2class(gm$posterior)
ggplot(data = data, aes(x = V1, y = V2, col = as.factor(y_gm))) +
geom_point() +
ggtitle("Mixture model")
kmeans[["centers"]]
mu_init2 <- list(kmeans[["centers"]][1,],
kmeans[["centers"]][2,],
kmeans[["centers"]][3,])
set.seed(123)
gm2 <- mvnormalmixEM(data[, 1:2],
k = 3,
mu = mu_init2,
arbvar = TRUE,
verb = TRUE,
maxit = 50)
data$y_gm2 <- prob2class(gm2$posterior)
ggplot(data = data, aes(x = V1, y = V2, col = as.factor(y_gm2))) +
geom_point() +
ggtitle("Mixture model with kmeans")
data$kmeans <- ifelse(data$y_kmeans == 1, 2,
ifelse(data$y_kmeans == 2, 1, 0))
plot1 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(V3))) +
geom_point() +
ggtitle("La nuda e cruda verità")
plot2 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(kmeans))) +
geom_point() +
ggtitle("Kmeans")
plot3 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(gm))) +
geom_point() +
ggtitle("Mixture model")
plot4 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(gm2))) +
geom_point() +
ggtitle("Mixture model with kmeans")
library(ggpubr)
ggarrange(plot1, plot2, plot3, plot4, ncol = 2, nrow = 2)
ggarrange(plot1, plot2, plot3, plot4, ncol = 2, nrow = 2)
plot1 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(V3))) +
geom_point() +
ggtitle("La nuda e cruda verità")
plot2 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(kmeans))) +
geom_point() +
ggtitle("Kmeans")
plot3 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(gm))) +
geom_point() +
ggtitle("Mixture model")
plot4 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(gm2))) +
geom_point() +
ggtitle("Mixture model with kmeans")
library(ggpubr)
ggarrange(plot1, plot2, plot3, plot4, ncol = 2, nrow = 2)
plot1
plot2
plot3
ggplot(data = data, aes(x = V1, y = V2, col = as.factor(gm))) +
geom_point() +
ggtitle("Mixture model")
ggplot(data = data, aes(x = V1, y = V2, col = as.factor(gm)))
data$kmeans <- ifelse(data$y_kmeans == 1, 2,
ifelse(data$y_kmeans == 2, 1, 0))
data$gm <- ifelse(data$y_gm == "comp.1", 0,
ifelse(data$y_gm == "comp.2", 2, 1))
data$gm2 <- ifelse(data$y_gm2 == "comp.1", 0,
ifelse(data$y_gm2 == "comp.2", 2, 1))
library(caret)
confusionMatrix(table(data$V3, data$kmeans))
confusionMatrix(table(data$V3, data$gm))
confusionMatrix(table(data$V3, data$gm2))
plot1 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(V3))) +
geom_point() +
ggtitle("La nuda e cruda verità")
plot2 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(kmeans))) +
geom_point() +
ggtitle("Kmeans")
plot3 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(gm))) +
geom_point() +
ggtitle("Mixture model")
plot4 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(gm2))) +
geom_point() +
ggtitle("Mixture model with kmeans")
library(ggpubr)
ggarrange(plot1, plot2, plot3, plot4, ncol = 2, nrow = 2)
data$gm <- ifelse(data$y_gm == "comp.1", 0,
ifelse(data$y_gm == "comp.2", 1, 2))
plot1 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(V3))) +
geom_point() +
ggtitle("La nuda e cruda verità")
plot2 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(kmeans))) +
geom_point() +
ggtitle("Kmeans")
plot3 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(gm))) +
geom_point() +
ggtitle("Mixture model")
plot4 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(gm2))) +
geom_point() +
ggtitle("Mixture model with kmeans")
library(ggpubr)
ggarrange(plot1, plot2, plot3, plot4, ncol = 2, nrow = 2)
data$gm <- ifelse(data$y_gm == "comp.1", 1,
ifelse(data$y_gm == "comp.2", 0, 2))
plot1 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(V3))) +
geom_point() +
ggtitle("La nuda e cruda verità")
plot2 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(kmeans))) +
geom_point() +
ggtitle("Kmeans")
plot3 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(gm))) +
geom_point() +
ggtitle("Mixture model")
plot4 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(gm2))) +
geom_point() +
ggtitle("Mixture model with kmeans")
library(ggpubr)
ggarrange(plot1, plot2, plot3, plot4, ncol = 2, nrow = 2)
data$gm <- ifelse(data$y_gm == "comp.1", 1,
ifelse(data$y_gm == "comp.2", 2, 0))
plot3 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(gm))) +
geom_point() +
ggtitle("Mixture model")
plot4 <- ggplot(data = data, aes(x = V1, y = V2, col = as.factor(gm2))) +
geom_point() +
ggtitle("Mixture model with kmeans")
library(ggpubr)
ggarrange(plot1, plot2, plot3, plot4, ncol = 2, nrow = 2)
library(caret)
confusionMatrix(table(data$V3, data$kmeans))
confusionMatrix(table(data$V3, data$gm))
confusionMatrix(table(data$V3, data$kmeans))
confusionMatrix(table(data$V3, data$gm))
confusionMatrix(table(data$V3, data$gm2))
library(nlme)
library(MASS)
?lmer
